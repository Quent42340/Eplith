- Faire les chaînes ( catchString() ) pour addr = string et var = string ainsi que var = addr en plus du tableau des chaînes
	* make; git commit -am "String type: OK."
- Faire fonctionner l'opérateur ',' avec les variables
		* make; git commit -am "Vars: OK."
- Chercher toutes les erreurs possibles pour avertir le codeur
  -> voir notemment les erreurs hex/dec avec ish et isd dans + - < > *
  -> rajouter la ligne dans le détail d'une erreur
  -> trouver les autres erreurs
	* make; git add .; git commit -am "Errors: OK."
- Tests
  -> Coder des tests pour
	1- tous les opérateurs
	2- les plages de données
	3- 3 tests sur chaque type de variable
		* make; git add .; git commit -am "Tests: OK."
- Faire les fonctions
  -> créer les fichiers functions.c et functions.h
  -> opérateurs '(', ')' et ':'
  -> étapes
	1- Fonctions simples, ni paramètres ni retour
		* make; test; git add .;git commit -am "Functions: 1/3"
	2- Fonctions avec paramètres mais sans retour
		* make; test; git commit -am "Functions: 2/3"
	3- Fonctions avec paramètres et retour
		* make; test; git commit -am "Functions: OK."
- Faire les conditions
	1- Condition simple if
		* make; test; git add .; git commit -am "Conditions: 1/3"
	2- Condition if else
		* make; test; git commit -am "Conditions: 2/3"
	3- Condition if elseif else
		* make; test; git commit -am "Conditions: OK."
- Améliorer les boucles
	1- Permettre la personnalisation de la condition de la boucle pour finir le do while
		* make; test; git add .; git commit -am "Loops: 1/3"
	2- Faire une boucle for
		* make; test; git commit -am "Loops: 2/3"
	3- Faire la boucle while
		* make; test; git commit -am "Loops: OK."
- Faire un switch
	* make; test; git add .; git commit -am "Switch: OK."
- Créer un devblog
- Écrire un mini-tuto sur le SDZ
